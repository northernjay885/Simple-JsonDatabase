type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram(client.Main.class);
        }

        private static TestedProgram getServer() {
            return new TestedProgram(server.Main.class);
        }

    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |-
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.net.Socket;

    class Session extends Thread {
        private final Socket socket;
        private final SimpleDataBase database;
        private boolean exitFlag;

        public Session(Socket socketForClient, SimpleDataBase database) {
            this.socket = socketForClient;
            this.database = database;
            this.exitFlag = false;
        }

        @Override
        public void run() {
            try (DataInputStream input = new DataInputStream(socket.getInputStream());
                 DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                String msgReceived = input.readUTF();
                //System.out.println("Received: " + msgReceived);
                String[] msgArr = msgReceived.split("\\s+");
                String msgSent = interactWithDatabase(msgArr, output);
                if (msgSent.equals("Exited!")) {
                    msgSent = "OK";
                    exitFlag = true;
                }
                output.writeUTF(msgSent);
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public String interactWithDatabase(String[] msgArr, DataOutputStream output) throws Exception {
            Controller controller = new Controller();
            String msgSent = "";
            switch (msgArr[0]) {
                case "get":
                    Command get = new GetCommand(database, Integer.parseInt(msgArr[1]));
                    controller.setCommand(get);
                    msgSent = controller.executeCommand();
                    break;

                case "set":
                    StringBuilder msgStored = new StringBuilder();
                    for (int i = 2; i < msgArr.length; ++i) {
                        msgStored.append(msgArr[i]);
                        msgStored.append(" ");
                    }
                    msgStored.delete(msgStored.length() - 1, msgStored.length());

                    Command set = new SetCommand(database, Integer.parseInt(msgArr[1]), msgStored.toString());
                    controller.setCommand(set);
                    msgSent = controller.executeCommand();
                    break;

                case "delete":
                    Command delete = new DeleteCommand(database, Integer.parseInt(msgArr[1]));
                    controller.setCommand(delete);
                    msgSent = controller.executeCommand();
                    break;

                case "exit":
                    Command exit = new ExitCommand();
                    controller.setCommand(exit);
                    msgSent = controller.executeCommand();
                    break;

                default:
                    msgSent = "Unrecognized command!";
                    throw new Exception("Unrecognized command!");
            }

            return msgSent;

            //System.out.println("Sent: " + msgSent);
        }

        boolean getExitFlag() {
            return exitFlag;
        }
    }
  learner_created: true
- name: src/server/SimpleDatabase.java
  visible: true
  text: |-
    package server;

    class SimpleDataBase {
        String[] arr;
        private final int SIZE_OF_DATABASE = 1000;

        public SimpleDataBase() {
            arr = new String[SIZE_OF_DATABASE];
        }

        public String get(int idx) {
            try {
                if (arr[idx].isEmpty()) {
                    return "ERROR";
                } else {
                    return arr[idx];
                }
            } catch (Exception e) {
                return "ERROR";
            }
        }

        public String set(int idx, String str) {
            try {
                arr[idx] = str;
                return "OK";
            } catch (Exception e) {
                return "ERROR";
            }
        }

        public String delete(int idx) {
            try {
                arr[idx] = "";
                return "OK";
            } catch (Exception e) {
                return "ERROR";
            }
        }
    }

    interface Command {
        String execute();
    }

    class SetCommand implements Command {
        private SimpleDataBase database;
        private int idx;
        private String str;

        public SetCommand(SimpleDataBase database, int idx, String str) {
            this.database = database;
            this.idx = idx;
            this.str = str;
        }

        @Override
        public String execute() {
            return database.set(idx, str);
        }
    }

    class GetCommand implements Command {
        private SimpleDataBase database;
        private int idx;

        public GetCommand(SimpleDataBase database, int idx) {
            this.database = database;
            this.idx = idx;
        }

        @Override
        public String execute() {
            return database.get(idx);
        }
    }

    class DeleteCommand implements Command {
        private SimpleDataBase database;
        private int idx;

        public DeleteCommand(SimpleDataBase database, int idx) {
            this.database = database;
            this.idx = idx;
        }

        @Override
        public String execute() {
            return database.delete(idx);
        }
    }

    class ExitCommand implements Command {

        public ExitCommand() { }

        @Override
        public String execute() {
            return "Exited!";
        }
    }

    class Controller {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public String executeCommand() {
            return command.execute();
        }
    }

    //class GUI {
    //    static void start() {
    //
    //        Scanner scanner = new Scanner(System.in);
    //        String current = scanner.next();
    //        while (!current.equals("exit")) {
    //            switch (current) {
    //                case "get":
    //                    int idxGet = scanner.nextInt() - 1;
    //                    database.get(idxGet);
    //                    break;
    //                case "set":
    //                    int idxSet = scanner.nextInt() - 1;
    //                    String str = scanner.nextLine().trim();
    //                    database.set(idxSet, str);
    //                    break;
    //                case "delete":
    //                    int idxDel = scanner.nextInt() - 1;
    //                    database.delete(idxDel);
    //                    break;
    //                default:
    //                    System.out.println("OK");
    //            }
    //            current = scanner.next();
    //        }
    //    }
    //}
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/351/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/65/stages/351/implement">JetBrains
    Academy</a>
  time: Thu, 29 Oct 2020 04:23:13 UTC
record: 4
